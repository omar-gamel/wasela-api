# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddFaqInput {
  rank: Int!
  question: String!
  answer: String!
}

type Article {
  id: String!
  image: String!
  text: String!
  likes: [User!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Assignment {
  id: String!
  description: String
  link: String
  file: String
  day: Day!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AssignmentResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  assignment: Assignment!
}

type Auth {
  token: String
  user: User
}

type AuthResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  token: String
  user: User
}

input BasicPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
}

type Cart {
  id: String!
  user: User!
  totoalQty: Int!
  totalPrice: String!
  items: [CartItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CartItem {
  id: String!
  course: Course
  path: Path
  type: ItemType!
  coupon: Coupon
}

type CartResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  cart: Cart
}

type Category {
  id: String!
  name: String!
  slug: String!
  description: String!
  icon: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CategoryPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  keyword: String
  isActive: Boolean
}

type CategoryResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  category: Category
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

input CheckoutInput {
  paymentMethod: PaymentMethods!
  fullName: String
  country: String
}

type Comment {
  id: String!
  author: User!
  text: String!
  isActive: Boolean!
  isReported: Boolean!
  reporters: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  comments: [Comment!]!
  totalCount: Int!
}

input CommentPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  isActive: Boolean
  isReported: Boolean
}

type CommentResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  comment: Comment
}

type ContactUsMessage {
  id: String!
  name: String!
  email: String!
  phone: String!
  message: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContactUsMessageResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  contactUsMessage: ContactUsMessage
}

type Coupon {
  id: String!
  code: String!
  isPercent: Boolean!
  amount: Float!
  startDate: DateTime!
  endDate: DateTime!
  isActive: Boolean!
  user: User!
  courses: [Course!]!
  paths: [Path!]!
  original_noUse: Int!
  noUse: Int!
  type: CouponAppliedType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CouponAppliedType {
  COURSES
  PATHS
}

input CouponPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  user: String
  isActive: Boolean
}

type CouponResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  coupon: Coupon
}

type Course {
  id: String!
  name: String!
  slug: String!
  description: String!
  requirements: String!
  prerequisites: String!
  deliverables: [String!]
  price: Float!
  image: String!
  promoVideo: String!
  totalHours: Float!
  softwareUsed: [SoftwareUsed!]!
  level: CourseLevel
  type: CourseType!
  status: CourseReviewStatus!
  isActive: Boolean!
  days: [Day!]!
  instructor: User!
  category: Category!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CourseConnection {
  totalCount: Int!
  courses: [Course!]!
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANVED
}

input CoursePaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  keyword: String
  instructorsIds: [String!]
  category: String
  status: CourseReviewStatus
  priceRange: PriceRangeInput
  isActive: Boolean
}

type CourseResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  course: Course
}

enum CourseReviewStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CourseType {
  ONLINE
  OFFLINE
}

input CreateAssignmentInput {
  description: String!
  link: String
  file: String
}

input CreateCategoryInput {
  name: String!
  description: String!
  icon: String!
  isActive: Boolean
}

input CreateContactUsMessageInput {
  name: String!
  email: String!
  phone: String!
  message: String!
}

input CreateCouponInput {
  code: String
  isPercent: Boolean!
  amount: Float!
  startDate: DateTime!
  endDate: DateTime!
  courses: [String!]
  paths: [String!]
  original_noUse: Int!
  type: CouponAppliedType!
}

input CreateCourseDayInput {
  rank: Int!
  title: String!
  description: String!
  attachments: [String!]
  lectures: [CreateLectureInput!]!
  assignments: [CreateAssignmentInput!]
}

input CreateCourseInput {
  name: String!
  description: String!
  image: String!
  promoVideo: String!
  totalHours: Int!
  prerequisites: String!
  requirements: String!
  deliverables: [String!]!
  price: Float!
  softwareUsed: [SoftwareUsedInput!]!
  level: CourseLevel!
  type: CourseType!
  category: String!
  instructor: String
}

input CreateCourseReviewInput {
  courseId: String!
  text: String!
  instructorRate: Float!
  courseRate: Float!
}

input CreateDayInput {
  rank: Int!
  title: String!
  description: String!
  attachments: [String!]
}

input CreateEventInput {
  title: String!
  description: String!
  image: String!
  startDate: DateTime!
  endDate: DateTime!
  place: String!
}

input CreateLectureInput {
  rank: Int!
  title: String!
  link: String!
}

input CreatePathInput {
  name: String!
  description: String!
  discount_price: Float!
  image: String!
  courses: [String!]!
  isActive: Boolean
}

input CreatePlaylistInput {
  name: String!
  description: String!
  image: String!
  items: [CreatePlaylistItemInput!]!
}

input CreatePlaylistItemInput {
  rank: Int!
  title: String!
  link: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Day {
  id: String!
  rank: Int!
  title: String!
  slug: String!
  description: String!
  course: Course!
  isActive: Boolean!
  lectures: [Lecture!]!
  comments: [Comment!]!
  reviews: [DayReview!]!
  attachments: [String!]
  assignments: [Assignment!]
  availableFor: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DayResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  day: Day
}

type DayReview {
  id: String!
  author: User!
  dayRate: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EditFaqInput {
  rank: Int
  question: String
  answer: String
}

type Event {
  id: String!
  title: String!
  slug: String!
  description: String!
  image: String!
  startDate: DateTime!
  endDate: DateTime!
  place: String!
  isActive: Boolean!
  interested: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EventPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  isActive: Boolean
}

type EventResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  event: Event
}

type Faq {
  id: String!
  rank: Int!
  question: String!
  answer: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Gender {
  MALE
  FEMALE
}

type Graduates {
  id: String!
  student: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GraduatesResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  graduated: Graduates
}

enum ItemType {
  COURSE
  PATH
}

type Lecture {
  id: String!
  rank: Int!
  title: String!
  link: String!
  day: Day!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LectureResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  lecture: Lecture
}

type Mutation {
  addDayLecture(input: CreateLectureInput!, dayId: String!): LectureResponse!
  updateDayLecture(input: UpdateLectureInput!, lectureId: String!, dayId: String!): LectureResponse!
  deleteDayLecture(lectureId: String!, dayId: String!): Response!
  addDay(courseId: String!, assignmentsInput: [CreateAssignmentInput!], lecturesInput: [CreateLectureInput!]!, dayInput: CreateDayInput!): DayResponse!
  updateDayInfo(input: UpdateDayInput!, dayId: String!): DayResponse!
  toggleDayActivation(dayId: String!): DayResponse!
  addOrUpdateDayReview(dayId: String!, dayRate: Float!): DayResponse!
  updateUserNotificationStatus(notificationId: String!): NotificationResponse!
  createCourse(daysInput: [CreateCourseDayInput!]!, courseInput: CreateCourseInput!): CourseResponse!
  updateCourseInfo(courseId: String!, courseInput: UpdateCourseInput!): CourseResponse!
  changeCourseStatus(courseId: String!, status: CourseReviewStatus!): CourseResponse!
  toggleCourseActivation(courseId: String!): CourseResponse!
  addCategory(input: CreateCategoryInput!): CategoryResponse!
  updateCategory(input: UpdateCategoryInput!, categoryId: String!): CategoryResponse!
  toggleCategoryActivation(categoryId: String!): CategoryResponse!
  addGraduated(studentId: String!): GraduatesResponse!
  removeGraduated(studentId: String!): GraduatesResponse!
  addFreePlaylist(input: CreatePlaylistInput!): PlaylistResponse!
  updateFreePlaylistInfo(input: UpdatePlaylistInput!, playlistId: String!): PlaylistResponse!
  toggleFreePlaylistActivation(playlistId: String!): PlaylistResponse!
  addFreePlaylistItem(input: CreatePlaylistItemInput!, playlistId: String!): PlaylistItemResponse!
  updateFreePlaylistItem(input: UpdatePlaylistItemInput!, playlistItemId: String!): PlaylistItemResponse!
  deleteFreePlaylistItem(playlistItemId: String!): Response!
  addFreePlaylistItemLikeAction(playlistItemId: String!): PlaylistItemResponse!
  addEvent(input: CreateEventInput!): EventResponse!
  eventRememberMe(eventId: String!): EventResponse!
  toggleEventActivation(eventId: String!): EventResponse!
  addBlogSection(title: String!, description: String!): SectionResponse!
  updateBlogSection(sectionId: String!, title: String, description: String): SectionResponse!
  toggleBlogSectionActivation(sectionId: String!): SectionResponse!
  addBlogSectionArticle(sectionId: String!, image: String!, text: String!): SectionResponse!
  updateCourseProgress(lectureId: String!, courseId: String!): UserCourseResponse!
  updatePathProgress(lectureId: String!, courseId: String!, pathId: String!): UserPathResponse!
  register(input: RegisterInput!): AuthResponse!
  createInstructor(input: RegisterInput!): AuthResponse!
  login(email: String!, password: String!): AuthResponse!
  resendVerificationMail(email: String!): Response!
  verifyUser(email: String!, token: String!): AuthResponse!
  requestResetPassword(email: String!): Response!
  resetPassword(input: ResetPasswordInput!): AuthResponse!
  socialLoginOrRegister(input: SocialAccountInput!): AuthResponse!
  addToCart(itemId: String!, itemType: ItemType!): CartResponse!
  removeFromCart(itemId: String!): CartResponse!
  clearCart: Response!
  applyCoupon(code: String!): CartResponse!
  createPath(input: CreatePathInput!): PathResponse!
  updatePathInfo(input: UpdatePathInput!, pathId: String!): PathResponse!
  addCourseToPath(courseId: String!, pathId: String!): PathResponse!
  removeCourseFromPath(courseId: String!, pathId: String!): PathResponse!
  togglePathActivation(pathId: String!): PathResponse!
  updateComment(commentId: String!, text: String): CommentResponse!
  deleteComment(commentId: String!): CommentResponse!
  toggleCommentActivation(commentId: String!): CommentResponse!
  reportComment(commentId: String!): CommentResponse!
  addDayComment(text: String!, dayId: String!): CommentResponse!
  addArticleComment(text: String!, articleId: String!): CommentResponse!
  addPlaylistItemComment(playlistItemId: String!, text: String!): CommentResponse!
  createContactUsMessage(input: CreateContactUsMessageInput!): ContactUsMessageResponse!
  deleteContactUsMessage(messageId: String!): ContactUsMessageResponse!
  createCoupon(input: CreateCouponInput!): CouponResponse!
  toggleCouponActivation(couponId: String!): CouponResponse!
  checkout(input: CheckoutInput!): OrderResponse!
  submitCourseReview(input: CreateCourseReviewInput!): ReviewResponse!
  updateReview(input: UpdateCourseReviewInput!, reviewId: String!): ReviewResponse!
  deleteReview(reviewId: String!): Response!
  toggleReviewActivation(reviewId: String!): ReviewResponse!
  reportCourseReview(reviewId: String!): ReviewResponse!
  addFaq(input: AddFaqInput!): SiteDetailResponse!
  editFaq(input: EditFaqInput!, faqId: String!): SiteDetailResponse!
  deleteFaq(faqId: String!): SiteDetailResponse!
  addOrEditSiteDetails(input: SiteDetailsInput!): SiteDetailResponse!
  updateUser(input: UpdateUserInput!): UserResponse!
  changePassword(input: ChangePasswordInput!): UserResponse!
  toggleUserActivation(userId: String!): UserResponse!
  addUserAssignmentAswer(description: String, files: [String!]!, dayId: String!): UserAssignmentResponse!
  toggleAppearUserAssignmentOnSpecialWorkPage(userAssignmentId: String!): UserAssignmentResponse!
  toggleUserAssignmentActivation(userAssignmentId: String!): UserAssignmentResponse!
  addUserAssignmentLikeAction(userAssignmentId: String!): UserAssignmentResponse!
  courseAddToOrRemoveFromWishlist(courseId: String!): WishlistResponse!
  pathAddToOrRemoveFromWishlist(pathId: String!): WishlistResponse!
  addDayAssignment(input: CreateAssignmentInput!, dayId: String!): AssignmentResponse!
  updateDayAssignment(input: UpdateAssignmentInput!, assignmentId: String!, dayId: String!): AssignmentResponse!
  deleteDayAssignment(assignmentId: String!, dayId: String!): Response!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type Notification {
  id: String!
  message: String!
  type: NotificationType!
  to: [NotificationRecipient!]!
  models: [NotificationModel!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationModel {
  id: String!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationRecipient {
  id: String!
  user: User!
  isSeen: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  notification: Notification!
}

enum NotificationType {
  EVENT_ALARM
  NEW_COURSE_SUBMITTED
  OFFLINE_ORDER_SUBMITTED
  PURCHASE
  REVIEW_REPORTED
  COMMENT_REPORTED
}

type Order {
  id: String!
  orderNumber: Int!
  user: User!
  subTotalPrice: Float!
  totalPrice: Float!
  fullName: String
  country: String
  items: [OrderItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  paymentMethod: String!
}

enum OrderBy {
  ASC
  DESC
}

type OrderConnection {
  totalCount: Int!
  orders: [Order!]!
}

type OrderItem {
  id: String!
  price: Float!
  course: Course
  path: Path
  type: ItemType!
  coupon: Coupon
  createdAt: DateTime!
  updatedAt: DateTime!
}

input OrderPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  userId: String
}

type OrderResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  order: Order
}

type Path {
  id: String!
  name: String!
  slug: String!
  description: String!
  total_price: Float!
  discount_price: Float!
  image: String!
  isActive: Boolean!
  courses: [Course!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PathConnection {
  totalCount: Int!
  paths: [Path!]!
}

input PathPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  keyword: String
  priceRange: PriceRangeInput
  isActive: Boolean
}

type PathResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  path: Path
}

enum PaymentMethods {
  CREDIT_CARD
  BANK_ACCOUNT
  PAYPAL
  WESTERN_UNION
  AMAN
  VODAFONE_CASH
  MOBI_CASH
}

type Playlist {
  id: String!
  name: String!
  slug: String!
  description: String!
  image: String!
  isActive: Boolean!
  items: [PlaylistItem!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlaylistItem {
  id: String!
  rank: Int!
  title: String!
  link: String!
  likes: [User!]!
  comments: [Comment!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlaylistItemResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  playlistItem: PlaylistItem
}

input PlaylistPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  isActive: Boolean
}

type PlaylistResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  playlist: Playlist
}

input PriceRangeInput {
  min: Float!
  max: Float!
}

enum ProviderName {
  GMAIL
  FACEBOOK
  TWITTER
}

type Purchase {
  id: String!
  price: Float!
  user: User!
  item: PurchaseItem!
  paymentMethod: PaymentMethods!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PurchaseConnection {
  totalCount: Int!
  purchases: [Purchase!]!
}

type PurchaseItem {
  id: String!
  type: ItemType!
  course: Course
  path: Path
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PurchasePaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  userId: String
}

type Query {
  day(slug: String!): Day
  myNotifications: [Notification!]!
  myNotification(notificationId: String!): Notification
  course(slug: String!): Course
  courses(input: CoursePaginationInput!): CourseConnection!
  categories(input: CategoryPaginationInput!): [Category!]!
  category(slug: String!): Category
  graduates: [Graduates!]!
  playlists(input: PlaylistPaginationInput!): [Playlist!]!
  playlist(slug: String!): Playlist
  events(input: EventPaginationInput!): [Event!]!
  event(slug: String!): Event
  blogSections(input: SectionPaginationInput!): [Section!]!
  blogSection(slug: String!): Section
  myWallet: Wallet
  myPurchases(input: BasicPaginationInput!): [Purchase!]!
  myPurchase(purchaseId: String!): Purchase
  purchases(input: PurchasePaginationInput!): PurchaseConnection!
  purchase(purchaseId: String!): Purchase
  myCourses: [UserCourse!]!
  myPaths: [UserPath!]!
  myCart: Cart
  path(slug: String!): Path
  paths(input: PathPaginationInput!): PathConnection!
  comments(input: CommentPaginationInput!): CommentConnection!
  contactUsMessage(messageId: String!): ContactUsMessage
  contactUsMessages: [ContactUsMessage!]!
  coupon(couponId: String!): Coupon
  coupons(input: CouponPaginationInput!): [Coupon!]!
  order(orderId: String!): Order
  orders(input: OrderPaginationInput!): OrderConnection!
  myOrder(orderId: String!): Order
  myOrders(input: BasicPaginationInput!): [Order!]!
  review(reviewId: String!): Review
  reviews(input: ReviewPaginationInput!): [Review!]!
  myReview(courseId: String!): Review
  myReviews: [Review!]!
  siteDetails: SiteDetail
  users(input: UserPaginationInput!): UserConnection!
  user(slug: String!): User
  currentUser: User
  myAssignmentAnswers: [UserAssignment!]!
  dayAssignmentsAnswers(input: UserAssignmentPaginationInput!): [UserAssignment!]!
  myWishlist: Wishlist
  wishlist(wishlistId: String!): Wishlist
  wishlists(input: WishlistPaginationInput!): WishlistConnection!
}

input RegisterInput {
  name: String!
  email: String!
  phone: String!
  password: String!
  avatar: String!
  gender: Gender!
  age: Int!
  country: String!
}

input ResetPasswordInput {
  email: String!
  password: String!
  token: String!
}

type Response implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type Review {
  id: String!
  author: User!
  course: Course!
  text: String!
  instructorRate: Float!
  courseRate: Float!
  isActive: Boolean!
  isReported: Boolean!
  reporters: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReviewPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  courseId: String
  isActive: Boolean
  isReported: Boolean
}

type ReviewResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  review: Review
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

type Section {
  id: String!
  title: String!
  slug: String!
  description: String!
  isActive: Boolean!
  articles: [Article!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SectionPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  keyword: String
  isActive: Boolean
}

type SectionResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  section: Section
}

type SiteDetail {
  id: String!
  faqs: [Faq!]!
  email: String
  number: String
  mission: String
  vision: String
  termsAndConditions: String
  privacyAndPolices: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SiteDetailResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  siteDetail: SiteDetail
}

input SiteDetailsInput {
  email: String
  number: String
  mission: String
  vision: String
  termsAndConditions: String
  privacyAndPolices: String
}

type SocialAccount {
  id: String!
  providerId: String!
  providerName: ProviderName!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SocialAccountInput {
  providerId: String!
  providerName: ProviderName!
  username: String!
  email: String!
}

type SoftwareUsed {
  id: String!
  name: String!
  icon: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SoftwareUsedInput {
  name: String!
  icon: String!
}

type Subscription {
  newNotification(userId: String!): Notification!
  dayCommentAdded(dayId: String!): Comment!
  articleCommentAdded(articleId: String!): Comment!
  playlistItemCommentAdded(playlistItemId: String!): Comment!
}

input UpdateAssignmentInput {
  description: String
  link: String
  file: String
}

input UpdateCategoryInput {
  name: String!
  description: String
  icon: String
  isActive: Boolean
}

input UpdateCourseInput {
  name: String
  description: String
  image: String
  totalHours: Int
  prerequisites: String
  requirements: String
  deliverables: [String!]
  price: Float
  softwareUsed: [SoftwareUsedInput!]
  level: CourseLevel
  type: CourseType
  promoVideo: String
  category: String
}

input UpdateCourseReviewInput {
  text: String
  instructorRate: Float
  courseRate: Float
}

input UpdateDayInput {
  rank: Float
  title: String
  description: String
}

input UpdateLectureInput {
  rank: Int
  title: String
  link: String
}

input UpdatePathInput {
  name: String
  description: String
  discount_price: Float
  image: String
}

input UpdatePlaylistInput {
  name: String
  description: String
  image: String
}

input UpdatePlaylistItemInput {
  rank: Int
  title: String
  link: String
}

input UpdateUserInput {
  name: String
  phone: String
  avatar: String
  age: Int
  country: String
  gender: Gender!
  about: String
}

type User {
  id: String!
  name: String!
  slug: String
  email: String!
  about: String
  phone: String
  avatar: String
  age: Float
  gender: Gender
  country: String
  isEmailVerified: Boolean!
  isActive: Boolean!
  roles: Role
  wishlist: Wishlist
  cart: Cart
  wallet: Wallet
  orders: [Order!]!
  purchases: [Purchase!]!
  events: [Event!]!
  userCourses: [UserCourse!]!
  userPaths: [UserPath!]!
  socialAccounts: [SocialAccount!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAssignment {
  id: String!
  day: Day!
  author: User!
  isActive: Boolean!
  description: String
  files: [String!]!
  likes: [User!]!
  appearOnSpecialWorkPage: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserAssignmentPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  dayId: String
  appearOnSpecialWorkPage: Boolean
  isActive: Boolean
}

type UserAssignmentResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  userAssignment: UserAssignment
}

type UserConnection {
  totalCount: Int!
  users: [User!]!
}

type UserCourse {
  id: String!
  user: User!
  course: Course!
  progress: Int!
  watchedLectures: [Lecture!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserCourseResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  userCourse: UserCourse
}

input UserPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  keyword: String
  role: Role
  isActive: Boolean
}

type UserPath {
  id: String!
  user: User!
  path: Path!
  progress: Int!
  watchedLectures: [Lecture!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserPathResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  userPath: UserPath!
}

type UserResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  user: User!
}

type Wallet {
  id: String!
  user: User!
  balance: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Wishlist {
  id: String!
  user: User!
  courses: [Course!]!
  paths: [Course!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WishlistConnection {
  totalCount: Int!
  wishlists: [Wishlist!]!
}

input WishlistPaginationInput {
  first: Int = 50
  skip: Int
  after: String
  before: String
  orderBy: OrderBy = ASC
  userId: String
}

type WishlistResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  wishlist: Wishlist
}
